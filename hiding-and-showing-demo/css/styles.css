* {
    box-sizing: border-box;
}
body {
    font-family: Verdana, Geneva, Tahoma, sans-serif;
    margin: 0px;
}
#cards-container {
    display: flex;
    flex-wrap: wrap;
    align-items: flex-start;
}
.card {
    flex: 300px;
    border: 3px solid black;
    margin: 24px;
    padding: 24px;
    border-radius: 12px;
    text-align: center;
    a {
        text-decoration: none;
        color: black;
        display: block;
        border: 3px solid black;
        padding: 12px;
        margin-top: 36px;
    }
}
#card1 {
    transition: 
    background-color 0.5s,
    box-shadow 0.5s,
    transform 0.5s;
}
#card1:hover {
    background-color: skyblue;
    box-shadow: 4px 4px 4px #0003;
    transform: translateY(-4px);
}
#card2:hover a {
    background-color: aqua;
    box-shadow: 4px 4px 4px #0003;
    transform: translateY(-4px);
}
#card2 a {
    transition: 
    background-color 0.5s,
    box-shadow 0.5s,
    transform 0.5s;
}
#card3:hover .card-content {
    opacity: 0;
    visibility: hidden;
}
#card3 .card-content {
    transition: 
    opacity 0.5s,
    visibility 0.5s;
}
#card4 .card-content {
    opacity: 0;
    visibility: hidden;
    transform: translateY(-28px);
    transition: 
    opacity 0.5s,
    visibility 0.5s,
    transform 0.5s;
}
#card4:hover .card-content {
    opacity: 1;
    visibility: visible;
    transform: translateY(0px);
}
#card5 {
    position: relative;
}
#card5 .card-content {
    position: absolute;
    background-color: #ddd;
    border: 3px solid black;
    border-radius: 12px;
    box-shadow: 4px 4px 4px #0003;
    left: 0px;
    margin: 0px 24px;
    padding: 24px;
    transform: translateY(-28px);
    opacity: 0;
    visibility: hidden;
    transition: 
    opacity 0.5s,
    visibility 0.5s,
    transform 0.5s;
}
#card5:hover .card-content {
    visibility: visible;
    opacity: 1;
    transform: translateY(0px);
}
#card6 {
    position: relative;
    border: 0px;
    padding: 0px;
}

/*
    Now we're going to add those properties
    we just stripped from the container onto
    the card faces.
*/
#card6 .card-front,
#card6 .card-back {
    border: 3px solid black;
    border-radius: 12px;
    padding: 24px;
}

/*
    Things should look almost the same as before,
    except for an empty card border above our 
    main content; that's where we're going to
    put a background image for the front face.

    We're going to simulate our card flip by 
    using the transform property, and using
    scaleX to shrink one card face horizontally
    until it's not even a pixel wide, and then
    we'll grow the other one.

    Now that our back card is basically ready
    to go, we'll shrink it down to its "back"
    state with scaleX(0)
*/

#card6 .card-back {
    transform: scaleX(0);
}

/*
    Now we just have that empty card for our front
    face left behind; we're going to use an image
    to fill that, so take a bit of time to grab an 
    image you like, and then we'll come back here and
    add some properties to front face of the card.

    (five minutes or so later)

    Now that we all have an image, we want this 
    image to fill up all the space of the card
    container (same as the back face), while
    also getting that ghost behavior of position:
    absolute.

    We'll do that with the properties below.
*/
#card6 .card-front {
    background-image: url("../images/perrito.png");
    background-size: cover;
    border-radius: 12px;
    width: 100%;
    height: 100%;
    position: absolute;
}

/* 
    Now we pretty much have things set up, ready
    to go for the animation.
    
    And this is where things get a little weird...
*/
/* 
    We basically want to animate the transform
    property for the front and back faces:
    the front face should shrink to nothing,
    and the back face should grow to its 
    normal size.

    However, if we do both at the same time...
    it's not going to look like a flip effect 
    at all
*/

#card6 .card-front {
    transition: transform 0.25s;
}

#card6 .card-back {
    transition: transform 0.25s;
}

#card6:hover .card-front {
    transform: scaleX(0);
}

#card6:hover .card-back {
    transform: scaleX(1);
}

/*
    It's an interesting effect, but not
    quite the one we're looking for.
*/
#card6 .card-front {
    background-image: url("../images/perrito.png");
    background-size: cover;
    border-radius: 12px;
    width: 100%;
    height: 100%;
    position: absolute;
}

/*
    Think about what normally happens if you
    flip a playing card around: we should see
    the front face shrinking first, and then
    once the front face is gone and we're looking
    at the paper-thin edge of the card, only then
    do we see the back face growing.

    That's the behavior we need to mimick if we
    want to simulate a card flip.

    To make that happen, we need to introduce
    a delay to the animation of the back face.
*/

#card6 .card-front {
    transition: transform 0.25s;
}

#card6 .card-back {
    /*
        We can add a delay to a transition
        by adding another time value after
        the first; the first time value is 
        the duration of the animation, and
        the second is the delay
    */
    transition: transform 0.25s 0.25s; /* updated */
}

#card6:hover .card-front {
    transform: scaleX(0);
}

#card6:hover .card-back {
    transform: scaleX(1);
}

/*
    Much better! Although we're using
    scaling to approximate the behavior of
    a rotating card, it's actually not a
    bad simulation.

    ...at least, until you move the mouse
    off of the card.

    The reverse transformation unfortunately
    doesn't work the way we want, because
    the delay isn't inverted when we go
    back to the default state.
*/